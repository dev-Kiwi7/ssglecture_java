package table;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.TableModel;

public class MemberRegist extends JFrame implements ActionListener, WindowListener{
	//서쪽 영역 
	JPanel p_west;
	JTextField t_id;
	JTextField t_name;
	JTextField t_tel;
	JButton bt;
	
	//센터영역
	JPanel p_center;
	JTable table;
	JScrollPane scroll;
	
	TableModel model;
	int index=0; //몇번째 층에 회원을 넣을지 결정짓는 인덱스
	
	Connection con; //접속은 윈도우창 생성시 한번 시도되며, 창 닫을때 접속해제
	
	public MemberRegist() {
		//생성
		p_west = new JPanel();
		t_id = new JTextField();
		t_name=new JTextField();
		t_tel = new JTextField();
		bt = new JButton("가입");
		
		p_center = new JPanel();
		//생성자에 이차원배열을 대입 방식은 불편...생성하는 시점부터 언제나 데이터가 있어야하는 전제조건이
		//생성자의 인수에 이 테이블에 보여줘야할 데이터 또는 데이터처리 객체
		//JTable은 MVC패턴을 어느 정보 반영한 컴포넌트이다..(완벽하지 않음 모델+컨트롤러)
		table = new JTable(model =new MyModel()); //JTable은 껍데기에 지나지 않기 때문에, 실제 보여질 데이터는
														//모델이 결정한다!!!
		scroll = new JScrollPane(table);
		
		//style 적용 
		p_west.setBackground(Color.ORANGE);
		p_west.setPreferredSize(new Dimension(150, 500));

		Dimension d = new Dimension(146, 35);
		t_id.setPreferredSize(d);
		t_name.setPreferredSize(d);
		t_tel.setPreferredSize(d);
		
		scroll.setPreferredSize(new Dimension(435, 490));
		
		//조립 
		p_west.add(t_id);
		p_west.add(t_name);
		p_west.add(t_tel);
		p_west.add(bt);
		add(p_west, BorderLayout.WEST);//프레임의 서쪽에 패널 부착 
	
		p_center.add(scroll);
		add(p_center);
		
		bt.addActionListener(this); //버튼과 리스너 연결 
		
		//윈도우창과 리스너와의 연결 
		this.addWindowListener(this);
		
		setBounds(2000,100, 600, 500);
		setVisible(true);
		//setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		//데이터베이스 접속 
		connect();
	}
	
	public void connect() {
		
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			String url="jdbc:mysql://localhst:3306/dev";
			String id="java";
			String pwd="1234";
			
			con=DriverManager.getConnection(url, id, pwd);
			if(con!=null) {
				this.setTitle("접속 성공");
			}
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	//회원 한명 등록 (model이 보유한 이차원 배열의 한 공간을 들어가게 할 예정, 즉 원하는 층에 들어갈예정)
	public void regist() {
		//회원1 명을 일차원 배열에 담아서, 그 일차원 배열을 model이 모델이 2차원배열에  
		//가장 최근의 위치에 밀어넣기!!
		//String[]  member = { t_id.getText(), t_name.getText(), t_tel.getText()};
		//((MyModel)model).rows[index++]=member;
		//table.updateUI();//테이블 새로 고침 
	}
	
	public void actionPerformed(ActionEvent e) {
		regist();
	}
	
	public static void main(String[] args) {
		new MemberRegist();

	}
	@Override
	public void windowOpened(WindowEvent e) {
		System.out.println("windowOpened()");		
	}
	
	//윈도우 창을 닫는 순간 호출되는 메서드이므로, 무언가 연결되어있던 자원을 
	//해제하는 용도로써 적합하다!!
	public void windowClosing(WindowEvent e) {
		System.out.println("windowClosing()");
	}
	
	@Override
	public void windowClosed(WindowEvent e) {
		System.out.println("windowClosed()");		
	}
	
	@Override
	public void windowIconified(WindowEvent e) {
		System.out.println("windowIconified()");		
	}
	
	@Override
	public void windowDeiconified(WindowEvent e) {
		System.out.println("windowDeiconified()");	
	}
	
	@Override
	public void windowActivated(WindowEvent e) {
		System.out.println("windowActivated()");		
	}
	
	@Override
	public void windowDeactivated(WindowEvent e) {
		System.out.println("windowDeactivated()");		
	}

}





